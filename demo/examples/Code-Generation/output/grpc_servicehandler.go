// Code generated by sysl DO NOT EDIT.
 package simple 
 
 import (
 "context" 
 "github.service.anz/sysl/server-lib/common" 
 "github.service.anz/sysl/server-lib/convert" 
 "google.golang.org/grpc" 
 simplegrpc "github.service.anz/anzx/bff/gen/simple/grpc" 
 
)
 
 // GrpcServiceHandler for Simple API 
 type GrpcServiceHandler struct {
 	 genCallback GenCallback 
 	 serviceInterface *GrpcServiceInterface 
 	 unimpl *simplegrpc.UnimplementedSimpleServer 
 }

 // NewGrpcServiceHandler for Simple 
 func NewGrpcServiceHandler ( genCallback GenCallback , serviceInterface *GrpcServiceInterface ) *GrpcServiceHandler {
 	 return &GrpcServiceHandler{genCallback,serviceInterface,&(simplegrpc.UnimplementedSimpleServer{})} 
 }
 

 // RegisterServer registers the Simple gRPC service 
 func ( s *GrpcServiceHandler ) RegisterServer ( ctx context.Context , server *grpc.Server ) {
 	 simplegrpc.RegisterSimpleServer ( server , s ) 
 }
 

 // GetStuffList ... 
 func ( s *GrpcServiceHandler ) GetStuffList ( ctx context.Context , req *simplegrpc.GetStuffListRequest ) ( *simplegrpc.GetStuffListResponse , error ) {
 	 if s.serviceInterface.GetStuffList == nil {
 	 return s.unimpl.GetStuffList ( ctx , req ) 
 }
 
 	 ctx, cancel := s.genCallback.DownstreamTimeoutContext ( ctx ) 
 	 defer cancel ( ) 
 	 client := GetStuffListClient {
 }

 
 	 return s.serviceInterface.GetStuffList ( ctx , req , client ) 
 }
 

 
 